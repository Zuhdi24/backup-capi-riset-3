/**************************************************************************************************
                                        GRADLE RUNNABLES
 *************************************************************************************************/

/*
*   @author: marshallbradley93@gmail.com
*
*   This Gradle script contains common build logic in the form of runnables (both tasks and methods).
*   These methods are dispatched to the relevant project files via either local or remote.gradle.
*
*   @TODO: Convert to custom Gradle plugin
*/

/**************************************************************************************************
                                            METHODS
 *************************************************************************************************/

// Check which test types (unit-test, androidtest) have been implemented
def listTests() {

    def availiableTests = []
    def testFolder = new File("${buildDir.parent}/src/test")
    def androidTestFolder = new File("${buildDir.parent}/src/androidTest")

    // Check unit-test location exists
    if (testFolder.exists()) {
        availiableTests.add("testDebug")
    }

    // Check androidtest location exists
    if (androidTestFolder.exists()) {
        availiableTests.add("connectedAndroidTestDebug")
    }

    // Return a list of test types that have been implemented
    return availiableTests
 }

 // List locations of availiable generated JaCoCo files
 def listTestFiles() {

    def testFiles = []
    def testList = listTests()

    // Check if unit-test JaCoCo file exists
    if (testList.contains("testDebug")) {
        testFiles.add("${buildDir}/jacoco/testDebug.exec")
    }

    // Check if androidest JaCoCo file exists
    if (testList.contains("connectedAndroidTestDebug")) {
        testFiles.add("${buildDir}/outputs/code-coverage/connected/coverage.ec")
    }

    // Return list of file locations
    return testFiles
 }

/**************************************************************************************************
                                            TASKS
 *************************************************************************************************/

// Code to merge JaCoCo .exec/.ec files
// Outputs to ${buildDir}/jacoco/TASK_NAME.exec
task jacocoMergeGen(type: JacocoMerge, dependsOn: listTests()) {

    description = "Merge code coverage files from all availiable test types"
    executionData = files(listTestFiles())
}

// Code to generate JaCoCo reports
task jacocoTestDebugReport(type:JacocoReport, dependsOn: ["jacocoMergeGen"]) {

    group = "Reporting"
    description = "Generate a JaCoCo code-coverage report for debug tests"

    // Include only relevant .class files
    classDirectories = fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories = files("${buildDir.parent}/src/main/java") // Set src directories
    additionalSourceDirs = files([
            "${buildDir}/generated/source/buildConfig/debug",
            "${buildDir}/generated/source/r/debug"
    ])

    // Generate report from merged .exec file
    executionData = files("${buildDir}/jacoco/jacocoMergeGen.exec")

    // Set report output configuration
    reports {
        xml {
            enabled = true
            destination "${project.buildDir}/reports/jacoco/jacoco.xml"
        }
        html {
            enabled = true
            destination "${project.buildDir}/reports/jacoco"
        }
    }
}

// Define the snapshot version to be the git hash
task generateSnapshotVersion {
    def gitHash = new ByteArrayOutputStream()
    def date = (new Date()).format('yyyyMMddHHmm')
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = gitHash
    }
    doLast {
        // Package the snapshot version into an external object
        project.ext.snapshotVersionCode = 'v' + gitHash.toString().trim() + '_b' + date
    }
}

// Set the version to release (required by Artifactory)
task releaseVersion << {
    version = releaseVersionCode
}

// Set the version to snapshot (required by Artifactory)
task snapshotVersion(dependsOn: "generateSnapshotVersion") << {
    version = snapshotVersionCode
}
